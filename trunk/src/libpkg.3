.\" Copyright (c) 2003 Tim Kientzle
.\" Copyright (c) 2005 Andrew Turner
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD$
.\"
.Dd September 25, 2005
.Dt libpkg 3
.Os
.Sh NAME
.Nm pkg_error_set ,
.Nm pkg_error_string ,
.Nm pkg_new ,
.Nm pkg_new_freebsd ,
.Nm pkg_get_control_files ,
.Nm pkg_get_next_file ,
.Nm pkg_free ,
.Nm pkg_repo_new ,
.Nm pkg_repo_new_files ,
.Nm pkg_repo_new_ftp ,
.Nm pkg_repo_get_pkg ,
.Nm pkg_repo_free ,
.Nm pkg_db_open ,
.Nm pkg_db_open_freebsd ,
.Nm pkg_db_install_pkg ,
.Nm pkg_db_is_installed ,
.Nm pkg_db_free ,
.Nm pkg_file_new_from_buffer ,
.Nm pkg_file_free ,
.Nm pkg_file_list_add ,
.Nm pkg_file_list_get_file ,
.Nm pkg_file_list_free
.Nd functions for managing binary packages
.Sh LIBRARY
.Lb libpkg
.Sh SYNOPSIS
.In pkg.h
.Ft int
.Fn pkg_error_set "struct pkg_object *obj" "const char *fmt" "..."
.Ft char *
.Fn pkg_error_string "struct pkg_object *obj"
.Ft struct pkg *
.Fn pkg_new "const char *name" "pkg_get_control_files_callback *control_files" "pkg_get_next_file_callback *next_file" "pkg_free_callback *free_pkg"
.Ft struct pkg *
.Fn pkg_new_freebsd "FILE *fd"
.Ft struct pkg_file_list *
.Fn pkg_get_control_files "struct pkg *pkg"
.Ft struct pkg_file *
.Fn pkg_get_next_file "struct pkg *pkg"
.Ft int
.Fn pkg_free "struct pkg *pkg"
.Ft struct pkg_repo *
.Fn pkg_repo_new "pkg_repo_get_pkg_callback *pkg_get" "pkg_repo_free_callback *pfree"
.Ft struct pkg_repo *
.Fn pkg_repo_new_files
.Ft struct pkg_repo *
.Fn pkg_repo_new_ftp "const char *site" "const char *path"
.Ft struct pkg *
.Fn pkg_repo_get_pkg "struct pkg_repo *repo" "const char *pkg_name"
.Ft int
.Fn pkg_repo_free "struct pkg_repo *repo"
.Ft struct pkg_db *
.Fn pkg_db_open "const char *base" "pkg_db_install_pkg_callback *install_pkg" "pkg_db_is_installed_callback *is_installed"
.Ft struct pkg_db *
.Fn pkg_db_open_freebsd "const char *base"
.Ft int
.Fn pkg_db_install_pkg "struct pkg_db *db" "struct pkg *pkg"
.Ft int
.Fn pkg_db_is_installed "struct pkg_db *db" "const char *package"
.Ft int
.Fn pkg_db_free "struct pkg_db *db"
.Ft struct pkg_file *
.Fn pkg_file_new_from_buffer "const char *filename" "uint64_t length" "char *buffer" "const struct stat *sb"
.Ft int
.Fn pkg_file_write "strict pkg_file *file"
.Ft int
.Fn pkg_file_free "struct pkg_file *file"
.Ft struct pkg_file_list *
.Fn pkg_file_list_add "struct pkg_file_list *list" "struct pkg_file *file"
.Ft struct pkg_file *
.Fn pkg_file_list_get_file "struct pkg_file_list *list" "const char *name"
.Ft int
.Fn pkg_file_list_free "struct pkg_file_list *list"
.Sh OVERVIEW
The
.Nm
library provides a set of APIs for locating package
files and managing installed packages.
There are three fundamental concepts:
.Bl -tag -compact -width indent
.It package object
A package object is a handle for an installable package.
You obtain a package object from either the package
repository or package database.
Changes made to an installed package object affect the
package on disk. For example, if you remove a file from the
package object, that causes the corresponding file to be
deleted from disk.
Packages from a repository can be installed to a given
database.
.It package database
A collection of information about installed packages.
In particular, you can ask the package database
for a list of all installed packages or the name of a package
containing a particular file.
.It package repository
A place where package files are stored.
This could be a directory, a CD-ROM, or a remote FTP site.
Some package repositories can provide information
about package dependencies.
.El
Part of the goal is to remove the need for applications to
know anything about the internal details of these systems.
For example, the package database may be implemented as
a collection of files stored in directories, as a Berkeley
DB database file, or as a collection of tables in a relational
database.
.Sh DESCRIPTION
The library is split into seperate objects to handle the
needed tasks of package creation, mofivication,
installation and removal.
.Ss Base Object
All objects derive from the
.Tn struct pkg_object
object. They can all be used with the following functions:
.Bl -tag -compact -width indent
.It Fn pkg_error_set
Sets the error string. The
.Vt fmt
is expected to be the same format as
.Xr printf 3 .
.It Fn pkg_error_string
Retreives the error string as written by
.Fn pkg_error_set
.El
.Ss Packages
A package is represented by a
.Tn struct pkg
which is normaly created by a Package Repository or
Package Database.
.Bl -tag -compact -width indent
.It Fn pkg_new
Allocates and initializes an empty
.Tn struct pkg
object. It takes in the packages name, and three callbacks
to read the control files, read the next content file and
free all data respectively.
These callbacks can be NULL if they are unneeded.
.It Fn pkg_new_freebsd
Creates a new package with callbacks to handle FreeBSD
packages version 1.1
.It Fn pkg_get_control_files
Returns all control files from the package.
Eg. The `+' files in /var/db/pkg/package/ from FreeBSD Packages.
.It Fn pkg_get_next_file
Gets the next non-control file from the package.
.It Fn pkg_free
Frees all allocated space from a package and calls the
package free callback.
.El
.Ss Package Repository
A Package Repository is a place where packages are stored
to be retrieved and installed.
The
.Tn struct pkg_repo
containes the needed callbacks to retrieve retrieve a named
package and free all used memory.
.Bl -tag -compact -width indent
.It Fn pkg_repo_new
Creates an empty
.Tn struct pkg_repo
to retreive files from.
Takes two callbacks to retrieve a named package and free
allocated memory respectively.
.It Fn pkg_repo_new_files
Creates a new
.Tn struct pkg_repo
where the get_pkg callback will create a package from a file.
.It Fn pkg_repo_new_ftp
Created a new
.Tn struct pkg_repo
where the get_pkg callback will use
.Xr fetch 3
to download the package from a FreeBSD package respority on
a FTP site.
If the
.Vt site
argument is NULL it will use the ftp.freebsd.org site.
If the
.Vt path
argument is NULL it will attempt to determine the correct
path to use.
.It Fn pkg_repo_get_pkg
Retrieves the
.Tn struct pkg
with the name
.Vt pkg_name
from the repo.
.It Fn pkg_repo_free
Frees all allocated Memory from the given
.Tn struct pkg_repo
.El
.Ss Package Database
The Package Database is a location where packages can be
installed to and retrieved from.
.Tn struct pkg_db
.Bl -tag -compact -width indent
.It Fn pkg_db_open
Creates a 
.Tn struct pkg_db
with the base set to
.Vt base and callbacks to Install a package and check if a
named package is currently installed respectively.
.It Fn pkg_db_open_freebsd
Creates a
.Tn struct pkg_db
with callbacks to install a FreeBSD package to the
filesystem tree with it's root at
.Vt base .
.It Fn pkg_db_install_pkg
Runs the package install callback to install a package.
.It Fn pkg_db_is_installed
Checks if the named package is installed. Returns PKG_YES if it is installed, PKG_NO if it is uninstalled or PKG_FAIL if there was an error.
.It Fn pkg_db_free
Frees the
.Tn struct pkg_db .
.El
.Ss Package File
The
.Tn struct pkg_file
containes one file.
It can be installed or processed further.
.Bl -tag -compact -width indent
.It Fn pkg_file_new_from_buffer
Creates a
.Tn struct pkg_file
from a NULL-terminated buffer. If
.Vt sb
is non-NULL it will use it to set the correct permisions on
the file.
.It Fn pkg_file_write
writes the file pointed to by
.Vt file
to the correct place relative to the current directory.
.It Fn pkg_file_free
Frees a
.Tn struct pkg_file .
.El
.Ss Package File List
A Package file list contains one or more Package files
within the
.Tn struct pkg_file_list .
It is a singularly linked list.
.Bl -tag -compact -width indent
.It Fn pkg_file_list_add
Returns a new root to a linked list.
.Vt file
is the file to be contained in the list.
.Vt list
will become the next item in the list.
.It Fn pkg_file_list_get_file
Returns the first file named
.Vt name
from
.Vt list .
.It Fn pkg_file_list_free
Frees all items in the list with the head at
.Vt list .
.El
